#[derive(Debug, Clone, Copy, PartialEq, Eq, Ord, PartialOrd)]
pub enum TokenDescription {
    Ident,
    Lifetime,
    As,
    Async,
    Await,
    Break,
    Const,
    Continue,
    Crate,
    Dyn,
    Else,
    Enum,
    Extern,
    False,
    Fn,
    For,
    If,
    Impl,
    In,
    Let,
    Loop,
    Match,
    Mod,
    Move,
    Mut,
    Pub,
    Ref,
    Return,
    Self_,
    SelfUpper,
    Static,
    Struct,
    Super,
    Trait,
    True,
    Type,
    Union,
    Unsafe,
    Use,
    Where,
    While,
    Yield,
    Abstract,
    Become,
    Box,
    Do,
    Final,
    Macro,
    Override,
    Priv,
    Try,
    Typeof,
    Unsized,
    Virtual,
    Literal,
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Caret,
    Not,
    And,
    Or,
    AndAnd,
    OrOr,
    Shl,
    Shr,
    PlusEquals,
    MinusEquals,
    StarEquals,
    SlashEquals,
    PercentEquals,
    CaretEquals,
    AndEquals,
    OrEquals,
    ShlEquals,
    ShrEquals,
    Equals,
    EqualsEquals,
    NotEquals,
    GreaterThan,
    LessThan,
    GreaterThanEquals,
    LessThanEquals,
    At,
    Underscore,
    Dot,
    DotDot,
    DotDotDot,
    DotDotEquals,
    Comma,
    Semicolon,
    Colon,
    ColonColon,
    RightArrow,
    FatArrow,
    Pound,
    Dollar,
    QuestionMark,
    LParen,
    RParen,
    LBracket,
    RBracket,
    LBrace,
    RBrace,
    FragmentBlock,
    FragmentExpr,
    FragmentIdent,
    FragmentItem,
    FragmentLifetime,
    FragmentLiteral,
    FragmentMeta,
    FragmentPat,
    FragmentPatParam,
    FragmentPath,
    FragmentStmt,
    FragmentTt,
    FragmentTy,
    FragmentVis,

    Eof,
}

impl TokenDescription {
    pub(crate) fn try_split_with(self, first: TokenDescription) -> Option<TokenDescription> {
        use TokenDescription::*;

        match (self, first) {
            (AndAnd, And) => Some(And),
            (OrOr, Or) => Some(Or),
            (Shl, LessThan) => Some(LessThan),
            (Shr, GreaterThan) => Some(GreaterThan),
            (PlusEquals, Plus) => Some(Equals),
            (MinusEquals, Minus) => Some(Equals),
            (StarEquals, Star) => Some(Equals),
            (SlashEquals, Slash) => Some(Equals),
            (PercentEquals, Percent) => Some(Equals),
            (CaretEquals, Caret) => Some(Equals),
            (AndEquals, And) => Some(Equals),
            (OrEquals, Or) => Some(Equals),
            (ShlEquals, Shl) => Some(Equals),
            (ShrEquals, Shr) => Some(Equals),
            (ShrEquals, GreaterThan) => Some(GreaterThanEquals),
            (DotDot, Dot) => Some(Dot),
            _ => None,
        }
    }
}
