// This file is automatically @generated by `grammar-gen`.
// It is not intended for manual editing.
// See the documentation in `expandable` for more information:
// https://github.com/scrabsha/expandable

use crate::{
    rt::{Address, Function, FunctionId, Instruction, Interpreter, Program, Register, Value},
    token::TokenDescription,
};
const PROGRAM: Program = Program {
    functions: &[
        Function {
            name: "vis",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Pub,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(30u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Pub,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(29u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::Crate,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(16u32),
                },
                Instruction::Peek2 {
                    tok: TokenDescription::Self_,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(16u32),
                },
                Instruction::Peek2 {
                    tok: TokenDescription::Super,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(16u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::Bump,
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(29u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::In,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(24u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(29u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::In,
                },
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(5u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(35u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentVis,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(33u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(35u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentVis,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "vis_opt",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Pub,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentVis,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(0u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "item",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Super,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Crate,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(26u32),
                },
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::LBrace,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(20u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(23u32),
                },
                Instruction::Call {
                    function: FunctionId(74u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(25u32),
                },
                Instruction::Call {
                    function: FunctionId(74u32),
                    result: Register(5u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Jump {
                    address: Address(46u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentItem,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(29u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(32u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentItem,
                },
                Instruction::Jump {
                    address: Address(46u32),
                },
                Instruction::Call {
                    function: FunctionId(1u32),
                    result: Register(7u8),
                },
                Instruction::LoadConst(Register(8u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Fn,
                    reg: Register(8u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(8u8),
                    address: Address(36u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(8u8),
                    address: Address(39u32),
                },
                Instruction::Call {
                    function: FunctionId(10u32),
                    result: Register(9u8),
                },
                Instruction::Jump {
                    address: Address(46u32),
                },
                Instruction::LoadConst(Register(10u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Struct,
                    reg: Register(10u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(10u8),
                    address: Address(42u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(10u8),
                    address: Address(45u32),
                },
                Instruction::Call {
                    function: FunctionId(3u32),
                    result: Register(11u8),
                },
                Instruction::Jump {
                    address: Address(46u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::LoadConst(Register(12u8), Value(0i8)),
                Instruction::PeekAny {
                    reg: Register(12u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(12u8),
                    address: Address(49u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(12u8),
                    address: Address(51u32),
                },
                Instruction::Call {
                    function: FunctionId(2u32),
                    result: Register(13u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 14usize,
        },
        Function {
            name: "struct_item",
            code: &[
                Instruction::Call {
                    function: FunctionId(1u32),
                    result: Register(1u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Struct,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(11u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(14u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(20u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::Call {
                    function: FunctionId(4u32),
                    result: Register(4u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Jump {
                    address: Address(33u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(28u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LBrace,
                },
                Instruction::Call {
                    function: FunctionId(6u32),
                    result: Register(6u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(33u32),
                },
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Semicolon,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(33u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 8usize,
        },
        Function {
            name: "tuple_struct_fields",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(8u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(5u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "tuple_struct_fields_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(8u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(5u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "struct_fields",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(9u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(7u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "struct_fields_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(9u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(7u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "tuple_struct_field",
            code: &[
                Instruction::Call {
                    function: FunctionId(1u32),
                    result: Register(1u8),
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "struct_field",
            code: &[
                Instruction::Call {
                    function: FunctionId(1u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(6u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(6u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(10u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Colon,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "fn_item",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::Fn,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ident,
                },
                Instruction::Jump {
                    address: Address(14u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentIdent,
                },
                Instruction::Jump {
                    address: Address(14u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Call {
                    function: FunctionId(24u32),
                    result: Register(3u8),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RightArrow,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(18u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(21u32),
                },
                Instruction::Bump,
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(5u8),
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(6u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "stmt",
            code: &[
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "block",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBrace,
                },
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(1u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "stmt_tail",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::PeekAny { reg: Register(1u8) },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(69u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::Jump {
                    address: Address(69u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentStmt,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentStmt,
                },
                Instruction::Jump {
                    address: Address(69u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Semicolon,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(18u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(22u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(69u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Let,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(25u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(39u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Let,
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(7u8),
                },
                Instruction::LoadConst(Register(8u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Colon,
                    reg: Register(8u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(8u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(8u8),
                    address: Address(34u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Colon,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(9u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Equals,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(10u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(11u8),
                },
                Instruction::Jump {
                    address: Address(69u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(12u8),
                },
                Instruction::LoadConst(Register(13u8), Value(0i8)),
                Instruction::LoadConst(Register(14u8), Value(0i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(14u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::LoadConst(Register(15u8), Value(1i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(15u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::LoadConst(Register(16u8), Value(2i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(16u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::LoadConst(Register(17u8), Value(3i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(17u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::LoadConst(Register(18u8), Value(4i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(18u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::LoadConst(Register(19u8), Value(5i8)),
                Instruction::Sub {
                    lhs: Register(12u8),
                    rhs: Register(19u8),
                    out: Register(13u8),
                },
                Instruction::Invert {
                    src: Register(13u8),
                    dst: Register(13u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(13u8),
                    address: Address(65u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(13u8),
                    address: Address(68u32),
                },
                Instruction::Call {
                    function: FunctionId(15u32),
                    result: Register(20u8),
                },
                Instruction::Jump {
                    address: Address(69u32),
                },
                Instruction::Call {
                    function: FunctionId(14u32),
                    result: Register(21u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 22usize,
        },
        Function {
            name: "stmt_end_semi",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Semicolon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(17u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::Jump {
                    address: Address(17u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::PeekAny { reg: Register(4u8) },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(17u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "stmt_end_nosemi",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(6u32),
                },
                Instruction::Call {
                    function: FunctionId(13u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "ty",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentTy,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentTy,
                },
                Instruction::Jump {
                    address: Address(37u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Underscore,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Underscore,
                },
                Instruction::Jump {
                    address: Address(37u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::SelfUpper,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Super,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(25u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(28u32),
                },
                Instruction::Call {
                    function: FunctionId(18u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(37u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(36u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(6u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(37u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "ty_no_bounds",
            code: &[
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "ty_path",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(20u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::Call {
                    function: FunctionId(19u32),
                    result: Register(4u8),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Not,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(14u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(16u32),
                },
                Instruction::Call {
                    function: FunctionId(74u32),
                    result: Register(6u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "ty_path_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(20u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(19u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "ty_path_segment",
            code: &[
                Instruction::Call {
                    function: FunctionId(52u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(19u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::LessThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(61u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(18u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(18u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(21u32),
                    result: Register(6u8),
                },
                Instruction::Jump {
                    address: Address(30u32),
                },
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(22u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(25u32),
                },
                Instruction::Call {
                    function: FunctionId(61u32),
                    result: Register(8u8),
                },
                Instruction::Jump {
                    address: Address(30u32),
                },
                Instruction::LoadConst(Register(9u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(9u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(9u8),
                    address: Address(28u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(9u8),
                    address: Address(30u32),
                },
                Instruction::Call {
                    function: FunctionId(21u32),
                    result: Register(10u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 11usize,
        },
        Function {
            name: "ty_path_fn",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(9u32),
                },
                Instruction::Call {
                    function: FunctionId(22u32),
                    result: Register(2u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RightArrow,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RightArrow,
                },
                Instruction::Call {
                    function: FunctionId(17u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "ty_path_fn_inputs",
            code: &[
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(23u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "ty_path_fn_inputs_",
            code: &[
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(23u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "fn_args",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::Jump {
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(42u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(18u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(19u32),
                },
                Instruction::Call {
                    function: FunctionId(25u32),
                    result: Register(5u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "fn_args_",
            code: &[
                Instruction::Call {
                    function: FunctionId(42u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "pat",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Or,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Or,
                },
                Instruction::Call {
                    function: FunctionId(28u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(27u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "pat_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Or,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Or,
                },
                Instruction::Call {
                    function: FunctionId(28u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(27u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "pat_no_top_alt",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentPat,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(9u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPatParam,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(9u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Underscore,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(9u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(12u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ref,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(17u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Mut,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(17u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(20u32),
                },
                Instruction::Call {
                    function: FunctionId(41u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(31u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(31u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::True,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(31u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::False,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(31u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(35u32),
                },
                Instruction::Call {
                    function: FunctionId(40u32),
                    result: Register(5u8),
                },
                Instruction::Call {
                    function: FunctionId(30u32),
                    result: Register(6u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDotEquals,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(38u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(42u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::DotDotEquals,
                },
                Instruction::Call {
                    function: FunctionId(40u32),
                    result: Register(8u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(9u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(9u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(9u8),
                    address: Address(47u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(9u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(9u8),
                    address: Address(47u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(9u8),
                    address: Address(50u32),
                },
                Instruction::Call {
                    function: FunctionId(29u32),
                    result: Register(10u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(11u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(11u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(11u8),
                    address: Address(55u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(11u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(11u8),
                    address: Address(55u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(11u8),
                    address: Address(64u32),
                },
                Instruction::LoadConst(Register(12u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::At,
                    reg: Register(12u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(12u8),
                    address: Address(59u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(12u8),
                    address: Address(62u32),
                },
                Instruction::Call {
                    function: FunctionId(41u32),
                    result: Register(13u8),
                },
                Instruction::Jump {
                    address: Address(63u32),
                },
                Instruction::Call {
                    function: FunctionId(29u32),
                    result: Register(14u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(15u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::And,
                    reg: Register(15u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(15u8),
                    address: Address(67u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(15u8),
                    address: Address(76u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::And,
                },
                Instruction::LoadConst(Register(16u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::And,
                    reg: Register(16u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(16u8),
                    address: Address(72u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(16u8),
                    address: Address(74u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::And,
                },
                Instruction::Call {
                    function: FunctionId(28u32),
                    result: Register(17u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(18u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(18u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(18u8),
                    address: Address(79u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(18u8),
                    address: Address(82u32),
                },
                Instruction::Call {
                    function: FunctionId(33u32),
                    result: Register(19u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::LoadConst(Register(20u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(20u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(20u8),
                    address: Address(85u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(20u8),
                    address: Address(88u32),
                },
                Instruction::Call {
                    function: FunctionId(37u32),
                    result: Register(21u8),
                },
                Instruction::Jump {
                    address: Address(89u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 22usize,
        },
        Function {
            name: "pat_starting_with_path",
            code: &[
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(31u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(33u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Not,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(16u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(20u32),
                },
                Instruction::Call {
                    function: FunctionId(74u32),
                    result: Register(7u8),
                },
                Instruction::Call {
                    function: FunctionId(30u32),
                    result: Register(8u8),
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::Call {
                    function: FunctionId(30u32),
                    result: Register(9u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 10usize,
        },
        Function {
            name: "pat_maybe_range_tail",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDotEquals,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::DotDotEquals,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(16u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(16u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(16u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(16u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(16u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(19u32),
                },
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(20u32),
                },
                Instruction::Call {
                    function: FunctionId(40u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(26u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(24u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(26u32),
                },
                Instruction::Bump,
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "pat_struct_tail",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBrace,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(8u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::DotDot,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(22u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(22u32),
                },
                Instruction::Call {
                    function: FunctionId(35u32),
                    result: Register(3u8),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(18u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(22u32),
                },
                Instruction::Call {
                    function: FunctionId(32u32),
                    result: Register(5u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "pat_struct_tail_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::DotDot,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(22u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(18u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(20u32),
                },
                Instruction::Call {
                    function: FunctionId(35u32),
                    result: Register(4u8),
                },
                Instruction::Call {
                    function: FunctionId(32u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(22u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "pat_tuple",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::Call {
                    function: FunctionId(36u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::Call {
                    function: FunctionId(34u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "pat_tuple_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(36u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(34u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "pat_struct_field",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(8u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Literal,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Colon,
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(29u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(22u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::Colon,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(20u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ident,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Colon,
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ident,
                },
                Instruction::Jump {
                    address: Address(29u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ref,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Mut,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(27u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(29u32),
                },
                Instruction::Call {
                    function: FunctionId(41u32),
                    result: Register(7u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 8usize,
        },
        Function {
            name: "pat_tuple_field",
            code: &[
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "pat_slice",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBracket,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(9u32),
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(38u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "pat_slice_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(38u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "pat_range_bound",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::Call {
                    function: FunctionId(40u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(25u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(14u32),
                },
                Instruction::Call {
                    function: FunctionId(40u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(25u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(25u32),
                },
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(6u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "pat_literal",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Minus,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::True,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::False,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(17u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(18u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "pat_ident",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ref,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ref,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Mut,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Mut,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(13u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(16u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ident,
                },
                Instruction::Jump {
                    address: Address(23u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(19u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(22u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentIdent,
                },
                Instruction::Jump {
                    address: Address(23u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::At,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(26u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(29u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::At,
                },
                Instruction::Call {
                    function: FunctionId(28u32),
                    result: Register(6u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "fn_arg",
            code: &[
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(1u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Colon,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "expr",
            code: &[
                Instruction::Call {
                    function: FunctionId(65u32),
                    result: Register(1u8),
                },
                Instruction::Call {
                    function: FunctionId(45u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(44u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_after_atom",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Plus,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Star,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Slash,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Percent,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::And,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Or,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Caret,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Shl,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Shr,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(21u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(26u32),
                },
                Instruction::Bump,
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(0u8), Value(6i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::EqualsEquals,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::NotEquals,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::GreaterThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::GreaterThanEquals,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThanEquals,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(39u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(44u32),
                },
                Instruction::Bump,
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(4u8),
                },
                Instruction::LoadConst(Register(0u8), Value(6i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::OrOr,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(49u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::AndAnd,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(49u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(54u32),
                },
                Instruction::Bump,
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(6u8),
                },
                Instruction::LoadConst(Register(0u8), Value(6i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(59u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::DotDotEquals,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(59u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(64u32),
                },
                Instruction::Bump,
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(8u8),
                },
                Instruction::LoadConst(Register(0u8), Value(6i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(9u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(9u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(9u8),
                    address: Address(67u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(9u8),
                    address: Address(72u32),
                },
                Instruction::Call {
                    function: FunctionId(57u32),
                    result: Register(10u8),
                },
                Instruction::Call {
                    function: FunctionId(44u32),
                    result: Register(11u8),
                },
                Instruction::LoadConst(Register(0u8), Value(7i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(12u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(12u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(12u8),
                    address: Address(75u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(12u8),
                    address: Address(81u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LBracket,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(13u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::LoadConst(Register(0u8), Value(8i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(14u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Dot,
                    reg: Register(14u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(14u8),
                    address: Address(84u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(14u8),
                    address: Address(87u32),
                },
                Instruction::Call {
                    function: FunctionId(59u32),
                    result: Register(15u8),
                },
                Instruction::Call {
                    function: FunctionId(44u32),
                    result: Register(16u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 17usize,
        },
        Function {
            name: "expr_atom",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Return,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Break,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(8u32),
                },
                Instruction::Call {
                    function: FunctionId(46u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(118u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::SelfUpper,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Super,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Crate,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(27u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(38u32),
                },
                Instruction::Call {
                    function: FunctionId(47u32),
                    result: Register(4u8),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Not,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(32u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(35u32),
                },
                Instruction::Call {
                    function: FunctionId(74u32),
                    result: Register(6u8),
                },
                Instruction::Jump {
                    address: Address(37u32),
                },
                Instruction::LoadConst(Register(0u8), Value(9i8)),
                Instruction::Return(Register(0u8)),
                Instruction::Jump {
                    address: Address(118u32),
                },
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(41u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(45u32),
                },
                Instruction::Bump,
                Instruction::LoadConst(Register(0u8), Value(10i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(8u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentExpr,
                    reg: Register(8u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(8u8),
                    address: Address(48u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(8u8),
                    address: Address(52u32),
                },
                Instruction::Bump,
                Instruction::LoadConst(Register(0u8), Value(11i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(9u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentBlock,
                    reg: Register(9u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(9u8),
                    address: Address(55u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(9u8),
                    address: Address(59u32),
                },
                Instruction::Bump,
                Instruction::LoadConst(Register(0u8), Value(12i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(10u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::If,
                    reg: Register(10u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(10u8),
                    address: Address(62u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(10u8),
                    address: Address(66u32),
                },
                Instruction::Call {
                    function: FunctionId(53u32),
                    result: Register(11u8),
                },
                Instruction::LoadConst(Register(0u8), Value(0i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(12u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(12u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(12u8),
                    address: Address(69u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(12u8),
                    address: Address(73u32),
                },
                Instruction::Call {
                    function: FunctionId(66u32),
                    result: Register(13u8),
                },
                Instruction::LoadConst(Register(0u8), Value(13i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(14u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(14u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(14u8),
                    address: Address(76u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(14u8),
                    address: Address(80u32),
                },
                Instruction::Call {
                    function: FunctionId(54u32),
                    result: Register(15u8),
                },
                Instruction::LoadConst(Register(0u8), Value(14i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(16u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(16u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(16u8),
                    address: Address(83u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(16u8),
                    address: Address(87u32),
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(17u8),
                },
                Instruction::LoadConst(Register(0u8), Value(1i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(18u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Loop,
                    reg: Register(18u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(18u8),
                    address: Address(92u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLifetime,
                    reg: Register(18u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(18u8),
                    address: Address(92u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(18u8),
                    address: Address(96u32),
                },
                Instruction::Call {
                    function: FunctionId(68u32),
                    result: Register(19u8),
                },
                Instruction::LoadConst(Register(0u8), Value(2i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(20u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::While,
                    reg: Register(20u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(20u8),
                    address: Address(99u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(20u8),
                    address: Address(103u32),
                },
                Instruction::Call {
                    function: FunctionId(69u32),
                    result: Register(21u8),
                },
                Instruction::LoadConst(Register(0u8), Value(15i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(22u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::For,
                    reg: Register(22u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(22u8),
                    address: Address(106u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(22u8),
                    address: Address(110u32),
                },
                Instruction::Call {
                    function: FunctionId(70u32),
                    result: Register(23u8),
                },
                Instruction::LoadConst(Register(0u8), Value(3i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(24u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Match,
                    reg: Register(24u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(24u8),
                    address: Address(113u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(24u8),
                    address: Address(117u32),
                },
                Instruction::Call {
                    function: FunctionId(71u32),
                    result: Register(25u8),
                },
                Instruction::LoadConst(Register(0u8), Value(4i8)),
                Instruction::Return(Register(0u8)),
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 26usize,
        },
        Function {
            name: "expr_return_or_break",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Return,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Return,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Break,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(12u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Break,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Async,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Break,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Continue,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Crate,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::False,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::For,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Let,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Loop,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Match,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Move,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Return,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::SelfUpper,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::True,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Union,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::While,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Yield,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Not,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Star,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Or,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::And,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::DotDot,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Pound,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentExpr,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(80u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(82u32),
                },
                Instruction::Call {
                    function: FunctionId(45u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_path",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentPath,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentPath,
                },
                Instruction::Jump {
                    address: Address(31u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LessThan,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(12u32),
                },
                Instruction::Call {
                    function: FunctionId(48u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(31u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Super,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::SelfUpper,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Crate,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(27u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(30u32),
                },
                Instruction::Call {
                    function: FunctionId(49u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(31u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "expr_qualified_path",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LessThan,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::As,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(5u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::As,
                },
                Instruction::Call {
                    function: FunctionId(18u32),
                    result: Register(3u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::GreaterThan,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(51u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_path_in",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(51u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::Call {
                    function: FunctionId(50u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_path_in_",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(51u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(5u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(50u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_path_segment",
            code: &[
                Instruction::Call {
                    function: FunctionId(52u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::LessThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(61u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "path_ident_segment",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::SelfUpper,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Self_,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Super,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Crate,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(13u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(16u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(17u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "expr_if",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::If,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(1u8),
                },
                Instruction::Call {
                    function: FunctionId(56u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Else,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(6u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(9u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Else,
                },
                Instruction::Call {
                    function: FunctionId(56u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_array",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBracket,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(17u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Semicolon,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(16u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Semicolon,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(4u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(17u32),
                },
                Instruction::Call {
                    function: FunctionId(55u32),
                    result: Register(5u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "expr_array_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(55u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_block",
            code: &[
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "expr_call",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(9u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(58u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_call_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(8u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(13u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(58u32),
                    result: Register(4u8),
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_dot_expr",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::Dot,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Await,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Await,
                },
                Instruction::Jump {
                    address: Address(36u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Ident,
                },
                Instruction::Call {
                    function: FunctionId(60u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(36u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(17u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(21u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentIdent,
                },
                Instruction::Call {
                    function: FunctionId(60u32),
                    result: Register(5u8),
                },
                Instruction::Jump {
                    address: Address(36u32),
                },
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(24u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(28u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Literal,
                },
                Instruction::Call {
                    function: FunctionId(60u32),
                    result: Register(7u8),
                },
                Instruction::Jump {
                    address: Address(36u32),
                },
                Instruction::LoadConst(Register(8u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(8u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(8u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(8u8),
                    address: Address(35u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentLiteral,
                },
                Instruction::Call {
                    function: FunctionId(60u32),
                    result: Register(9u8),
                },
                Instruction::Jump {
                    address: Address(36u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 10usize,
        },
        Function {
            name: "expr_field_or_method",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::ColonColon,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::ColonColon,
                },
                Instruction::Call {
                    function: FunctionId(61u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(57u32),
                    result: Register(3u8),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(12u32),
                },
                Instruction::Call {
                    function: FunctionId(57u32),
                    result: Register(5u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "expr_angle_bracketed_generic_arguments",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LessThan,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::GreaterThan,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::GreaterThan,
                },
                Instruction::Jump {
                    address: Address(9u32),
                },
                Instruction::Call {
                    function: FunctionId(63u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(62u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_angle_bracketed_generic_arguments_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::GreaterThan,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::GreaterThan,
                },
                Instruction::Jump {
                    address: Address(19u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Comma,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(9u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(19u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::GreaterThan,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(14u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(17u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::GreaterThan,
                },
                Instruction::Jump {
                    address: Address(19u32),
                },
                Instruction::Call {
                    function: FunctionId(63u32),
                    result: Register(4u8),
                },
                Instruction::Call {
                    function: FunctionId(62u32),
                    result: Register(5u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 6usize,
        },
        Function {
            name: "expr_generic_argument",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(8u32),
                },
                Instruction::Bump,
                Instruction::Jump {
                    address: Address(35u32),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(11u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(14u32),
                },
                Instruction::Call {
                    function: FunctionId(64u32),
                    result: Register(3u8),
                },
                Instruction::Jump {
                    address: Address(35u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentIdent,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(19u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::Ident,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(19u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(28u32),
                },
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek2 {
                    tok: TokenDescription::Equals,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(23u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(26u32),
                },
                Instruction::Bump,
                Instruction::BumpToken {
                    tok: TokenDescription::Equals,
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(6u8),
                },
                Instruction::Jump {
                    address: Address(35u32),
                },
                Instruction::LoadConst(Register(7u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(7u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(7u8),
                    address: Address(31u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(7u8),
                    address: Address(34u32),
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(8u8),
                },
                Instruction::Jump {
                    address: Address(35u32),
                },
                Instruction::Call {
                    function: FunctionId(16u32),
                    result: Register(9u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 10usize,
        },
        Function {
            name: "minus_prefixed_literal",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Minus,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Minus,
                },
                Instruction::Call {
                    function: FunctionId(64u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(20u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::Literal,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Literal,
                },
                Instruction::Jump {
                    address: Address(20u32),
                },
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentLiteral,
                    reg: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(16u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(19u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentLiteral,
                },
                Instruction::Jump {
                    address: Address(20u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_prefixed_unary_op",
            code: &[Instruction::Return(Register(0u8))],
            reg_num: 1usize,
        },
        Function {
            name: "expr_tuple",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(9u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(67u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_tuple_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(13u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(15u32),
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(3u8),
                },
                Instruction::Call {
                    function: FunctionId(67u32),
                    result: Register(4u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "expr_loop",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::FragmentLifetime,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FragmentLifetime,
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Loop,
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "expr_while",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::While,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(1u8),
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(2u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "expr_for",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::For,
                },
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(1u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::In,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(12u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "expr_match",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::Match,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(1u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::LBrace,
                },
                Instruction::Call {
                    function: FunctionId(72u32),
                    result: Register(2u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 3usize,
        },
        Function {
            name: "match_arms",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(5u32),
                },
                Instruction::Jump {
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(73u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(72u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "match_arm",
            code: &[
                Instruction::Call {
                    function: FunctionId(26u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::If,
                    reg: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(4u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::If,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(3u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::FatArrow,
                },
                Instruction::Call {
                    function: FunctionId(43u32),
                    result: Register(4u8),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::Comma,
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 5usize,
        },
        Function {
            name: "macro_call_tail",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::Not,
                },
                Instruction::Call {
                    function: FunctionId(75u32),
                    result: Register(1u8),
                },
                Instruction::LoadConst(Register(2u8), Value(0i8)),
                Instruction::LoadConst(Register(3u8), Value(16i8)),
                Instruction::Sub {
                    lhs: Register(1u8),
                    rhs: Register(3u8),
                    out: Register(2u8),
                },
                Instruction::Invert {
                    src: Register(2u8),
                    dst: Register(2u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(2u8),
                    address: Address(7u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(2u8),
                    address: Address(10u32),
                },
                Instruction::LoadConst(Register(0u8), Value(17i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(4u8), Value(0i8)),
                Instruction::LoadConst(Register(5u8), Value(18i8)),
                Instruction::Sub {
                    lhs: Register(1u8),
                    rhs: Register(5u8),
                    out: Register(4u8),
                },
                Instruction::Invert {
                    src: Register(4u8),
                    dst: Register(4u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(4u8),
                    address: Address(15u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(4u8),
                    address: Address(18u32),
                },
                Instruction::LoadConst(Register(0u8), Value(19i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(6u8), Value(0i8)),
                Instruction::LoadConst(Register(7u8), Value(20i8)),
                Instruction::Sub {
                    lhs: Register(1u8),
                    rhs: Register(7u8),
                    out: Register(6u8),
                },
                Instruction::Invert {
                    src: Register(6u8),
                    dst: Register(6u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(6u8),
                    address: Address(23u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(6u8),
                    address: Address(26u32),
                },
                Instruction::LoadConst(Register(0u8), Value(5i8)),
                Instruction::Return(Register(0u8)),
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 8usize,
        },
        Function {
            name: "token_stream_group",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::Call {
                    function: FunctionId(77u32),
                    result: Register(2u8),
                },
                Instruction::LoadConst(Register(0u8), Value(16i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(10u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(14u32),
                },
                Instruction::Call {
                    function: FunctionId(79u32),
                    result: Register(4u8),
                },
                Instruction::LoadConst(Register(0u8), Value(18i8)),
                Instruction::Return(Register(0u8)),
                Instruction::LoadConst(Register(5u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(5u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(5u8),
                    address: Address(17u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(5u8),
                    address: Address(21u32),
                },
                Instruction::Call {
                    function: FunctionId(81u32),
                    result: Register(6u8),
                },
                Instruction::LoadConst(Register(0u8), Value(20i8)),
                Instruction::Return(Register(0u8)),
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 7usize,
        },
        Function {
            name: "token_stream_group_or_token",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::LParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LBracket,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::LBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(7u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(10u32),
                },
                Instruction::Call {
                    function: FunctionId(75u32),
                    result: Register(2u8),
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::LoadConst(Register(3u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(17u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(17u32),
                },
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(3u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(3u8),
                    address: Address(17u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(3u8),
                    address: Address(20u32),
                },
                Instruction::Error {
                    message: "<sample message>",
                },
                Instruction::Jump {
                    address: Address(21u32),
                },
                Instruction::Bump,
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "token_stream_group_paren",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LParen,
                },
                Instruction::Call {
                    function: FunctionId(78u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "token_stream_group_paren_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RParen,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RParen,
                },
                Instruction::Jump {
                    address: Address(8u32),
                },
                Instruction::Call {
                    function: FunctionId(76u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(78u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "token_stream_group_bracket",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBracket,
                },
                Instruction::Call {
                    function: FunctionId(80u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "token_stream_group_bracket_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBracket,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBracket,
                },
                Instruction::Jump {
                    address: Address(8u32),
                },
                Instruction::Call {
                    function: FunctionId(76u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(80u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
        Function {
            name: "token_stream_group_brace",
            code: &[
                Instruction::BumpToken {
                    tok: TokenDescription::LBrace,
                },
                Instruction::Call {
                    function: FunctionId(82u32),
                    result: Register(1u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 2usize,
        },
        Function {
            name: "token_stream_group_brace_",
            code: &[
                Instruction::LoadConst(Register(1u8), Value(0i8)),
                Instruction::Peek {
                    tok: TokenDescription::RBrace,
                    reg: Register(1u8),
                },
                Instruction::JumpIfNonZero {
                    cond: Register(1u8),
                    address: Address(3u32),
                },
                Instruction::JumpIfZero {
                    cond: Register(1u8),
                    address: Address(6u32),
                },
                Instruction::BumpToken {
                    tok: TokenDescription::RBrace,
                },
                Instruction::Jump {
                    address: Address(8u32),
                },
                Instruction::Call {
                    function: FunctionId(76u32),
                    result: Register(2u8),
                },
                Instruction::Call {
                    function: FunctionId(82u32),
                    result: Register(3u8),
                },
                Instruction::Return(Register(0u8)),
            ],
            reg_num: 4usize,
        },
    ],
};
pub fn new_item<Span>() -> Interpreter<'static, Span>
where
    Span: Copy,
{
    Interpreter::new(&PROGRAM, FunctionId(2u32))
}
pub fn new_stmt<Span>() -> Interpreter<'static, Span>
where
    Span: Copy,
{
    Interpreter::new(&PROGRAM, FunctionId(11u32))
}
pub fn new_ty<Span>() -> Interpreter<'static, Span>
where
    Span: Copy,
{
    Interpreter::new(&PROGRAM, FunctionId(16u32))
}
pub fn new_pat<Span>() -> Interpreter<'static, Span>
where
    Span: Copy,
{
    Interpreter::new(&PROGRAM, FunctionId(26u32))
}
pub fn new_expr<Span>() -> Interpreter<'static, Span>
where
    Span: Copy,
{
    Interpreter::new(&PROGRAM, FunctionId(43u32))
}
